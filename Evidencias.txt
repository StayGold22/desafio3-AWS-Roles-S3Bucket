En este desafio se utilizo localstack para simular los servicio de AWS y realizar la actividad solicitada.

------------------------------------------------------------------------------------
Configurar endpoint de LocalStack
------------------------------------------------------------------------------------

root@aws-sandbox:~# export AWS_ENDPOINT_URL=http://localhost:4566

------------------------------------------------------------------------------------
Se crea el bucket S3
------------------------------------------------------------------------------------

root@aws-sandbox:~# aws s3 mb s3://s3-support-bucket --endpoint-url=$AWS_ENDPOINT_URL
make_bucket: s3-support-bucket 

------------------------------------------------------------------------------------
Siempre indicamos a donde apuntan los comandos en este caso a localStack.
------------------------------------------------------------------------------------

--endpoint-url=$AWS_ENDPOINT_URL 

------------------------------------------------------------------------------------
Creamos la trust policy 
------------------------------------------------------------------------------------

root@aws-sandbox:~# cat > trust-policy.json <<FIN

{

  "Version": "2012-10-17",

  "Statement": [

    {

      "Effect": "Allow",

      "Principal": {

        "AWS": "*"

      },

      "Action": "sts:AssumeRole"

    }

  ]

}

FIN

------------------------------------------------------------------------------------
Creamos el rol S3WriteRole, se le asigna la policy trust-policy.json.
------------------------------------------------------------------------------------

root@aws-sandbox:~# aws iam create-role --role-name S3WriteRole --assume-role-policy-document file://trust-policy.json --endpoint-url=$AWS_ENDPOINT_URL

------------------------------------------------------------------------------------
Creamos la write policy
------------------------------------------------------------------------------------

root@aws-sandbox:~# cat > s3-write-policy.json <<FIN

{

  "Version": "2012-10-17",

  "Statement": [

    {

      "Effect": "Allow",

      "Action": [

        "s3:PutObject",

        "s3:PutObjectAcl"

      ],

      "Resource": "arn:aws:s3:::s3-support-bucket/*"

    }

  ]

}

FIN

------------------------------------------------------------------------------------
Asignamos la write policy al rol s3WriteRole
------------------------------------------------------------------------------------

root@aws-sandbox:~# aws iam put-role-policy --role-name S3WriteRole --policy-name S3WritePolicy --policy-document file://s3-write-policy.json --endpoint-url=$AWS_ENDPOINT_URL

------------------------------------------------------------------------------------
Verificamos que se le haya asignado la politica S3WritePolicy al rol S3WriteRole.
------------------------------------------------------------------------------------

root@aws-sandbox:~# aws iam get-role-policy --role-name S3WriteRole --policy-name S3WritePolicy --endpoint-url=$AWS_ENDPOINT_URL

{
    "RoleName": "S3WriteRole",
    "PolicyName": "S3WritePolicy",
    "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
            {
                "Effect": "Allow",
                "Action": [
                    "s3:PutObject",
                    "s3:PutObjectAcl"
                ],
                "Resource": "arn:aws:s3:::s3-support-bucket/*"
            }
        ]
    }
}

------------------------------------------------------------------------------------
Creamos el usuario IAM al cual llamaremos s3-support
------------------------------------------------------------------------------------

root@aws-sandbox:~# aws iam create-user --user-name s3-support --endpoint-url=$AWS_ENDPOINT_URL
{
    "User": {
        "Path": "/",
        "UserName": "s3-support",
        "UserId": "xtcq21zmocg2jpfucxo7",
        "Arn": "arn:aws:iam::000000000000:user/s3-support",
        "CreateDate": "2025-09-25T03:46:04.571344+00:00"
    }
}

------------------------------------------------------------------------------------
Generamos las claves programaticas para el usuario que acabamos de crear (s3-support)
------------------------------------------------------------------------------------

root@aws-sandbox:~# aws iam create-access-key --user-name s3-support --endpoint-url=$AWS_ENDPOINT_URL

{
    "AccessKey": {
        "UserName": "s3-support",
        "AccessKeyId": "LKIAQAAAAAAALFCJI4UY",
        "Status": "Active",
        "SecretAccessKey": "B4r9QLNMyvneHeD0kVoPSyHyalCNtGXrUOgXB0gz",
        "CreateDate": "2025-09-25T03:47:10.805349+00:00"
    }
}

------------------------------------------------------------------------------------
Creamos un perfil Aws CLI para poder ejecutar comandos con el usuario s3-support
------------------------------------------------------------------------------------

root@aws-sandbox:~# aws configure --profile s3-support

AWS Access Key ID [None]: LKIAQAAAAAAALFCJI4UY
AWS Secret Access Key [None]: B4r9QLNMyvneHeD0kVoPSyHyalCNtGXrUOgXB0gz
Default region name [None]: us-east-1
Default output format [None]: json

------------------------------------------------------------------------------------
Actualizamos la policy para que solo el usuario s3-support pueda asumir el rol.
------------------------------------------------------------------------------------

root@aws-sandbox:~# cat > trust-policy-update.json <<FIN

{

  "Version": "2012-10-17",

  "Statement": [

    {

      "Effect": "Allow",

      "Principal": { "AWS": "arn:aws:iam::000000000000:user/s3-support" },

      "Action": "sts:AssumeRole"

    }

  ]

}

FIN

------------------------------------------------------------------------------------
Actualizamos la policy.
------------------------------------------------------------------------------------

root@aws-sandbox:~# aws iam update-assume-role-policy --role-name S3WriteRole --policy-document file://trust-policy-update.json --endpoint-url=$AWS_ENDPOINT_URL

------------------------------------------------------------------------------------
Asumimos el rol S3WriteRole atravez con STS.
------------------------------------------------------------------------------------

root@aws-sandbox:~# aws sts assume-role --role-arn arn:aws:iam::000000000000:role/S3WriteRole --role-session-name s3supportsession --endpoint-url=$AWS_ENDPOINT_URL

{
    "Credentials": {
        "AccessKeyId": "LSIAQAAAAAAAD6J2KBYR",
        "SecretAccessKey": "+ZwCq0KIhOhMOq+84MJhrynGJnMG3OIfYN4JPx4d",
        "SessionToken": "FQoGZXIvYXdzEBYaDfe+CPkw/+vEHvPqwa0xBx1Si2GyXc9/gmpusjmn8XM8v9QKlgW3680YAaxik6+VePzZa98qFGS8T7jwC1mTb53oIpIkIAex+g75i77nJNo95G4+AdCb4UWy1NArUzjdL4A0iNObIkdZyykri8AaRjE+8kW4L885H/GunmJ6vgyaMgPUK9zHfPUWLdA6HH+WMUr905EPvYAy22ovGw7QQLVtDMKWFHiiKqxCijwrg+zI6SyvfslzfIhOn8xsWm5nurehpJA8KEpm4NW8IDz7RwXshZ6HJaDeSpMl9mR/hbkjFlQBHV6FC6+yyb5BTRueJP1KhyFGXxoMBxcAGEs=",
        "Expiration": "2025-09-25T06:12:11.976365+00:00"
    },
    "AssumedRoleUser": {
        "AssumedRoleId": "AROAQAAAAAAALSDF3G3HL:s3supportsession",
        "Arn": "arn:aws:sts::000000000000:assumed-role/S3WriteRole/s3supportsession"
    },
    "PackedPolicySize": 6
}

------------------------------------------------------------------------------------
Con el rol asumido, seteamos las variables para que cuando ejecutemos un comando 'aws' se ejecuten con estas credenciales.
------------------------------------------------------------------------------------

export AWS_ACCESS_KEY_ID="LSIAQAAAAAAAD6J2KBYR"
export AWS_SECRET_ACCESS_KEY="+ZwCq0KIhOhMOq+84MJhrynGJnMG3OIfYN4JPx4d"
export AWS_SESSION_TOKEN="FQoGZXIvYXdzEBYaDfe+CPkw/+vEHvPqwa0xBx1Si2GyXc9/gmpusjmn8XM8v9QKlgW3680YAaxik6+VePzZa98qFGS8T7jwC1mTb53oIpIkIAex+g75i77nJNo95G4+AdCb4UWy1NArUzjdL4A0iNObIkdZyykri8AaRjE+8kW4L885H/GunmJ6vgyaMgPUK9zHfPUWLdA6HH+WMUr905EPvYAy22ovGw7QQLVtDMKWFHiiKqxCijwrg+zI6SyvfslzfIhOn8xsWm5nurehpJA8KEpm4NW8IDz7RwXshZ6HJaDeSpMl9mR/hbkjFlQBHV6FC6+yyb5BTRueJP1KhyFGXxoMBxcAGEs="
export AWS_DEFAULT_REGION=us-east-1
export AWS_ENDPOINT_URL=http://localhost:4566

------------------------------------------------------------------------------------
Creamos un archivo .txt de prueba 
------------------------------------------------------------------------------------

root@aws-sandbox:~# echo "Hola LocalStack" > prueba.txt

------------------------------------------------------------------------------------
Probamos escribir el bucket con el archivo recientemente creado.
------------------------------------------------------------------------------------

root@aws-sandbox:~# aws s3 cp prueba.txt s3://s3-support-bucket/ --endpoint-url=$AWS_ENDPOINT_URL

upload: ./prueba.txt to s3://s3-support-bucket/prueba.txt  

------------------------------------------------------------------------------------
Verificamos que se haya escrito el bucket con el archivo prueba.txt
------------------------------------------------------------------------------------

root@aws-sandbox:~# aws s3 ls s3://s3-support-bucket/ --endpoint-url=$AWS_ENDPOINT_URL

2025-09-25 02:26:09         16 prueba.txt












